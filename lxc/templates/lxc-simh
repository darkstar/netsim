#!/bin/bash

# Author:
# Michael Drueing <michael@drueing.de>

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

# Detect use under userns (unsupported)
for arg in "$@"; do
    [ "$arg" = "--" ] && break
    if [ "$arg" = "--mapped-uid" -o "$arg" = "--mapped-gid" ]; then
        echo "This template can't be used for unprivileged containers." 1>&2
        echo "You may want to try the \"download\" template instead." 1>&2
        exit 1
    fi
done

# Make sure the usual locations are in PATH
export PATH=$PATH:/usr/sbin:/usr/bin:/sbin:/bin

install_simh()
{
    rootfs=$1
    name=$2
    res=0
    tree="\
$rootfs/selinux \
$rootfs/dev \
$rootfs/home \
$rootfs/root \
$rootfs/etc \
$rootfs/etc/init.d \
$rootfs/simh \
$rootfs/bin \
$rootfs/usr/bin \
$rootfs/sbin \
$rootfs/usr/sbin \
$rootfs/proc \
$rootfs/sys \
$rootfs/mnt \
$rootfs/tmp \
$rootfs/var/log \
$rootfs/usr/share/udhcpc \
$rootfs/dev/pts \
$rootfs/dev/shm \
$rootfs/lib \
$rootfs/usr/lib \
$rootfs/lib64 \
$rootfs/usr/lib64"

    mkdir -p $tree || return 1
    chmod 755 $tree || return 1

    pushd $rootfs/dev > /dev/null || return 1

    # minimal devices needed for busybox
    mknod -m 666 tty c 5 0       || res=1
    mknod -m 666 console c 5 1   || res=1
    mknod -m 666 tty0 c 4 0      || res=1
    mknod -m 666 tty1 c 4 0      || res=1
    mknod -m 666 tty5 c 4 0      || res=1
    mknod -m 600 ram0 b 1 0      || res=1
    mknod -m 666 null c 1 3      || res=1
    mknod -m 666 zero c 1 5      || res=1
    mknod -m 666 urandom c 1 9   || res=1

    popd > /dev/null

    # root user defined
    cat <<EOF >> $rootfs/etc/passwd
root:x:0:0:root:/root:/bin/sh
EOF

    cat <<EOF >> $rootfs/etc/group
root:x:0:root
EOF

    # mount everything
    cat <<EOF >> $rootfs/etc/init.d/rcS
#!/bin/sh
/bin/syslogd
/bin/mount -a
EOF

    # executable
    chmod 744 $rootfs/etc/init.d/rcS || return 1

    # mount points
    cat <<EOF >> $rootfs/etc/fstab
shm   /dev/shm   tmpfs   defaults     0      0
EOF

    # writable and readable for other
    chmod 644 $rootfs/etc/fstab || return 1

    cmdline="/simh/${simh_binary} simh.conf"

    cat <<EOF >> $rootfs/simh/run-simh.sh
#!/bin/sh
/bin/echo Starting SimH...
echo -n "Running ${cmdline} in 5..."
sleep 1
echo -n "4..."
sleep 1
echo -n "3..."
sleep 1
echo -n "2..."
sleep 1
echo -n "1..."
sleep 1
cd /simh
${cmdline}
/bin/echo respawning...
EOF
    chmod 744 $rootfs/simh/run-simh.sh

    # launch rcS first then make a console available
    # and propose a shell on the tty, the last one is
    # not needed
    cat <<EOF >> $rootfs/etc/inittab
::sysinit:/etc/init.d/rcS
console::respawn:/simh/run-simh.sh
EOF
    # writable and readable for other
    chmod 644 $rootfs/etc/inittab || return 1

    return $res
}

configure_simh()
{
    rootfs=$1

    if [ ! -f "${basepath}/simh/bin/${simh_binary}" ]; then
        echo "simh executable '${simh_binary}' not found in ${basepath}/simh/bin"
        return 1
    fi

    # copy simh in the rootfs
    cp $(which busybox) $rootfs/bin
    cp ${basepath}/simh/bin/${simh_binary} $rootfs/simh
    if [ $? -ne 0 ]; then
        echo "failed to copy busybox + simh in the rootfs"
        return 1
    fi

    cp ${basepath}/simh/nvram/${simh_nvram_file} $rootfs/simh/nvram.bin
    if [ $? -ne 0 ]; then
        echo "failed to copy NVRAM file (${simh_nvram_file}) into rootfs"
        return 1
    fi

    if [ -n "${simh_rom_file}" ]; then
        if [ ! -f "${basepath}/simh/roms/${simh_rom_file}" ]; then
            echo "failed to find required ROM file ${simh_rom_file} in ${basepath}/simh/roms"
            return 1
        fi
        cp ${basepath}/simh/roms/${simh_rom_file} $rootfs/simh
    fi

    # copy SimH disk files
    if [ -n "${simh_disk0_type}" ]; then
        if [ -f "${basepath}/simh/disks/${simh_disk0_file}" ]; then
            cp --reflink=auto --sparse=always "${basepath}/simh/disks/${simh_disk0_file}" $rootfs/simh
        else
            echo "The disk 0 specified (${basepath}/simh/disks/${simh_disk0_file}) does not exist"
            return 1
        fi
    fi
    if [ -n "${simh_disk1_type}" ]; then
        if [ -f "${basepath}/simh/disks/${simh_disk1_file}" ]; then
            cp --reflink=auto "${basepath}/simh/disks/${simh_disk1_file}" $rootfs/simh
        else
            echo "The disk 1 specified (${basepath}/simh/disks/${simh_disk1_file}) does not exist"
            return 1
        fi
    fi

    # patch simh bootdisks for network configuration
    if [ -n "${ip}" ]; then
        simh_patch_bootdisk "${basepath}" $rootfs/simh/${simh_disk0_file} $guesthostname ${ip} ${netmask}
        if [ $? -ne 0 ]; then
            echo "Error patching system disk."
            return 1
        fi
    fi

    # symlink busybox for the commands it supports
    # it would be nice to just use "chroot $rootfs busybox --install -s /bin"
    # but that only works right in a chroot with busybox >= 1.19.0
    pushd $rootfs/bin > /dev/null || return 1
    ./busybox --help | grep 'Currently defined functions:' -A300 | \
      grep -v 'Currently defined functions:' | tr , '\n' | \
      xargs -n1 ln -s busybox
    popd > /dev/null

    # relink /sbin/init
    ln $rootfs/bin/busybox $rootfs/sbin/init

    # passwd exec must be setuid
    chmod +s $rootfs/bin/passwd
    touch $rootfs/etc/shadow

    # setting passwd for root
    CHPASSWD_FILE=$rootfs/root/chpasswd.sh

    cat <<EOF >$CHPASSWD_FILE
echo "setting root password to \"root\""

mount -n --bind /lib $rootfs/lib
if [ \$? -ne 0 ]; then
    echo "Failed bind-mounting /lib at $rootfs/lib"
    exit 1
fi

chroot $rootfs chpasswd <<EOFF 2>/dev/null
root:root
EOFF


if [ \$? -ne 0 ]; then
    echo "Failed to change root password"
    exit 1
fi

umount $rootfs/lib

EOF

    lxc-unshare -s MOUNT -- /bin/sh < $CHPASSWD_FILE
    rm $CHPASSWD_FILE

    # generate config file, step 1: machine config
    echo "${simh_base_config}"         >  $rootfs/simh/simh.conf

    # generate config file, step 2: setup network interface
    if [ -n "$intf" ]; then
        # prepare a random MAC address for the VM
        macaddr=$(printf '08-00-2b-%02x-%02x-%02x\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)))

        echo "set XQ MAC=${macaddr}"       >> $rootfs/simh/simh.conf
        echo "attach XQ0 ${intf}"          >> $rootfs/simh/simh.conf
    else
        echo "set XQ dis"                  >> $rootfs/simh/simh.conf
    fi

    # generate config file, step 3: OS specific configuration.
    if [ -n "$simh_disk0_type" ]; then
        echo "set ${simh_disk0_controller} ${simh_disk0_type}"    >> $rootfs/simh/simh.conf
        echo "attach ${simh_disk0_controller} ${simh_disk0_file}" >> $rootfs/simh/simh.conf
    fi
    if [ -n "$simh_disk1_type" ]; then
        echo "set ${simh_disk1_controller} ${simh_disk1_type}"    >> $rootfs/simh/simh.conf
        echo "attach ${simh_disk1_controller} ${simh_disk1_file}" >> $rootfs/simh/simh.conf
    fi

    # generate config file, step 4: boot the CPU
    echo "boot cpu"                        >> $rootfs/simh/simh.conf

    return 0
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3

grep -q "^lxc.rootfs" $path/config 2>/dev/null || echo "lxc.rootfs = $rootfs" >> $path/config
cat <<EOF >> $path/config
lxc.haltsignal = SIGUSR1
lxc.utsname = $name
lxc.tty = 1
lxc.pts = 1
lxc.cap.drop = sys_module mac_admin mac_override sys_time

# When using LXC with apparmor, uncomment the next line to run unconfined:
#lxc.aa_profile = unconfined
EOF

    libdirs="\
        lib \
        usr/lib \
        lib64 \
        usr/lib64"

    for dir in $libdirs; do
        if [ -d "/$dir" ] && [ -d "$rootfs/$dir" ]; then
            echo "lxc.mount.entry = /$dir $dir none ro,bind 0 0" >> $path/config
        fi
    done
    #echo "lxc.mount.entry = /sys/kernel/security sys/kernel/security none ro,bind,optional 0 0" >>$path/config
    echo "lxc.mount.auto = proc:mixed sys" >>$path/config

    # do network configuration
    # first remove "default" network stuff from config
    cat $path/config | grep -v 'lxc.network.' > $path/config.new
    mv $path/config.new $path/config

    if [ -n "$intf" ]; then
        echo "lxc.network.type = veth"  >>$path/config
        echo "lxc.network.name = $intf" >>$path/config
        echo "lxc.network.link = $brdg" >>$path/config
        echo "lxc.network.flags = up"   >>$path/config
        echo ""                         >>$path/config        
    fi

}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path> --basepath=<path-to-basedir>
           --simhmachine=<machine_config_file> --simhos=<os_config_file>
           --ether=interface:bridge:ip:netmask --hostname=<hostname>
EOF
    return 0
}

options=$(getopt -o hp:n: -l help,rootfs:,path:,name:,basepath:,simhmachine:,simhos:,ether:,hostname: -- "$@")
if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
        -h|--help)      usage $0 && exit 0;;
        -p|--path)      path=$2; shift 2;;
        --rootfs)       rootfs=$2; shift 2;;
        --basepath)     basepath=$2; shift 2;;
        --simhmachine)  simhmachinecfg=$2; shift 2;;
        --simhos)       simhoscfg=$2; shift 2;;
        --ether)        ethercfg=$2; shift 2;;
        --hostname)     guesthostname=$2; shift 2;;
        -n|--name)      name=$2; shift 2;;
        --)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ -z "${guesthostname}" ]; then
    echo "Warning: no hostname set, using container name ($name) instead"
    guesthostname=$name
fi

if [ -z "${basepath}" ]; then
    echo "The basepath value is required"
    exit 1
fi

if [ -z "${ethercfg}" ]; then
    echo "Warning: no ethernet defined. Your container will be of limited use."
    intf=""
    brdg=""
else
    intf=$(echo $ethercfg | awk -F: '{ print $1; }')
    brdg=$(echo $ethercfg | awk -F: '{ print $2; }')
    ip=$(echo $ethercfg | awk -F: '{ print $3; }')
    netmask=$(echo $ethercfg | awk -F: '{ print $4; }')
fi

if [ -z "${simhmachinecfg}" ]; then
   echo "The --simhmachine parameter is required"
   exit 1
fi

if [ -z "${simhoscfg}" ]; then
   echo "The --simhos parameter is required"
   exit 1
fi

if [ ! -f "${basepath}/simh/configs/machine-${simhmachinecfg}.conf" ]; then
    echo "The config file ${basepath}/simh/configs/machine-${simhmachinecfg}.conf does not exist"
    exit 1
fi

if [ ! -f "${basepath}/simh/configs/os-${simhoscfg}.conf" ]; then
    echo "The OS config file ${basepath}/simh/configs/os-${simhoscfg}.conf does not exist"
    exit 1
fi

# parse IOS values
. "${basepath}/simh/configs/machine-${simhmachinecfg}.conf"
. "${basepath}/simh/configs/os-${simhoscfg}.conf"

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

# detect rootfs
config="$path/config"
if [ -z "$rootfs" ]; then
    if grep -q '^lxc.rootfs' $config 2>/dev/null ; then
        rootfs=$(awk -F= '/^lxc.rootfs =/{ print $2 }' $config)
    else
        rootfs=$path/rootfs
    fi
fi

install_simh $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to install simh's rootfs"
    exit 1
fi

configure_simh $rootfs
if [ $? -ne 0 ]; then
    echo "failed to configure simh template"
    exit 1
fi

copy_configuration $path $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to write configuration file"
    exit 1
fi

